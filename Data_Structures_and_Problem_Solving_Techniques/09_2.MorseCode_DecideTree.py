#######################################
# 정보통계학과 
# 학번 : 2019015020 
# 이름 : 오진석
# 작성일 : 11.09
#######################################

## 모르스(모스) 코드 결정 트리
# 모르스(모스) 부호 : 점과 선의 조합으로 구성된 메시지 전달용 부호

## 모르스 부호 표
# [('A', '.-'), ('B', '-...'), ('C', '-.-.'), ('D', '-..'), ('E', '.'), ('F', '..-.'), ('G', '--.'), ('H', '....'),
#  ('I', '..'), ('J', '.---'), ('K', '-.-'), ('L', '.-..'), ('M', '--'), ('N', '-.'), ('O', '---'), ('P', '.--.'),
#  ('Q', '--.-'), ('R', '.-.'), ('S', '...'), ('T', '-'), ('U', '..-'), ('V', '...-'), ('W', '.--'), ('X', '-..-'),
#  ('Y', '-.--'), ('Z', '--..')]    
    
## 인코딩 : 알파벳에서 모르스 코드로 변환, O(1) : 표에서 바로 찾으므로 
## 디코딩 : 표에서 순차 탐색, O(n) : 표에서 탐색을 하므로
# 따라서 디코딩의 방법을 개선하기 위해 결정트리를 가져왔다.
# 결정 트리 : 여러 단계의 복잡한 조건을 갖는 문제에 대해 조건과 그에 따른 해결방법을 트리 형태로 나타낸 것
# 디코딩 시간 복잡도 O(n)

class TNode:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right
    
def make_morse_tree(): # 모수 부호코드를 결정 트리로 변환 구축하는 함수. 코드를 통해 경로를 찾고, 최종적으로 찾은 곳에 값을 이입
    root = TNode(None, None, None) # 뿌리노드 만들기
    for tp in table: # 모스 부호 table에서 하나씩 가져오기
        code = tp[1] # 모르스 코드, tp[0]는 문자를 뜻함
        node = root # 현재 뿌리 노드를 저장 해둠
        for c in code: # 모스 부호 코드를 처음부터 반환
            if c == '.': # '.' 문자이면
                if node.left == None: # 왼쪽 자식 노드가 비었으면 빈 노드 만들기
                    node.left = TNode(None, None, None)
                node = node.left # 왼쪽으로 이동
            elif c == '-': # 오른쪽으로 이동하면 -문자가 추가된다.
                if node.right == None: # 오른쪽 자식 노드가 비었으면
                    node.right = TNode(None, None, None) # 빈 노드 만들기
                node = node.right # 오른쪽으로 이동
        node.data = tp[0] # 최종적으로 찾은 곳에 해당 알파벳을 대입
    return root

def decode(root, code): # 모스코드 -> 알파벳, 매개변수로 모스부호 트리와 대코딩 할 모스 부호를 전달
    node = root # 뿌리 노드를 전달
    for c in code: # 디코딩할 모스부호에서 문자를 처음부터 가져오기
        if c =='.': # '.'이면 왼쪽으로 이동
            node = node.left
        elif c=='-': # '-'이면 오른쪽으로 이동
            node = node.right
    return node.data # 최종적으로 위치한 노드에 data, 즉 알파벳을 반환

def encode(ch): # 알파벳 -> 모스부호, 모스부호 테이블 사용
    idx = ord(ch) - ord('A') # 기준이 되는 문자A와의 차이를 이용하여 해당 문자의 노드 번호를 추출
    return table[idx][1] # 모스부호 테이블을 이용하여 해당 노드 번호의 알파벳을 반환

# 본문
if __name__ == "__main__":
    
    # 모스 부호 코드 테이블, 리스트 안에 튜플로 값을 넣어 선언        
    table = [('A', '.-'), ('B', '-...'), ('C', '-.-.'), ('D', '-..'), ('E', '.'), ('F', '..-.'), ('G', '--.'), ('H', '....'),
             ('I', '..'), ('J', '.---'), ('K', '-.-'), ('L', '.-..'), ('M', '--'), ('N', '-.'), ('O', '---'), ('P', '.--.'),
             ('Q', '--.-'), ('R', '.-.'), ('S', '...'), ('T', '-'), ('U', '..-'), ('V', '...-'), ('W', '.--'), ('X', '-..-'),
             ('Y', '-.--'), ('Z', '--..')]    
    
    morseCodeTree = make_morse_tree() # morseCodeTree에 결정 트리를 생성한다.
    str = input("입력 문장 : ")
    mlist = [] # 인코딩된 모스부호를 저장할 공간
    for ch in str : # 입력한 문자열이 끝날때까지 반복
        code = encode(ch) # 해당 알파벳을 모스부호로 인코딩
        mlist.append(code) # 인코딩한 알파벳 저장
    print("Morse Code: ", mlist) # 인코딩된 모스부호를 나열
    print("Decoding: ",end='')
    
    for code in mlist: # 인코딩된 모스부호를 하나씩 가져오기
        ch = decode(morseCodeTree, code) # 절정 트리와 모스 부로를 이용하여 다시 알파벳으로 디코딩
        print(ch, end='') # 디코딩한 값을 출력한다.
    print()    

'''
입력 문장 : GAMEOVER
Morse Code:  ['--.', '.-', '--', '.', '---', '...-', '.', '.-.']
Decoding: GAMEOVER
'''


































