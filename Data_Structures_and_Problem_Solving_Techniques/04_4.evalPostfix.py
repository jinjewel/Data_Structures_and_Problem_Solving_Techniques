#######################################
# 정보통계학과 
# 학번 : 2019015020 
# 이름 : 오진석
# 작성일 : 10.05
#######################################

# 스택의 응용 : 수식의 계산
# 스택을 이용한 후위표기 수식의 계산
# 스택을 이용한 중위표기 수식의 후위표기 변환

# 수식의 표기 방법 3가지
# 전위 : 연산자 피연산자1 피연산자2
# 중위 : 피연산자 연산자 피연산자2
# 후위 : 피연산자1 피연산자2 연산자

# 후위표기 수식의 알고리즘
from Stack_class import Stack

def evalPostfix( expr ):
    s = Stack() # s.top = [] 객체 생성
    
    for token in expr: # 리스트의 모든 항목에 대해
        if token in "+-*/" : # in 연산자는 문자열이 들어오면 원소로 나누어서 인식, 항목이 연산자 이면
            val2 = s.pop() 
            val1 = s.pop()
            if (token == '+'): # 해당하는 연산이면
                s.push(val1 + val2) # 해당하는 연산을 진행 한 후 s.top = []에 추가
            elif (token == '-'):
                s.push(val1 - val2)
            elif (token == '*'):
                s.push(val1 * val2)
            elif (token == '/'):
                s.push(val1 / val2)
        else: # 항목이 피연산자이면
            s.push( float(token) ) # 실수로 변경에서 스택에 저장
    return s.pop() # 최종결과를 반환

# 본문
if __name__ == "__main__":
    expr1 = [ '8', '2', '/', '3', '-', '3', '2', '*', '+']
    expr2 = [ '1', '2', '/', '4', '*', '1', '4', '/', '*']
    print(expr1, ' -->', evalPostfix(expr1))
    print(expr2, ' -->', evalPostfix(expr2))

'''
['8', '2', '/', '3', '-', '3', '2', '*', '+']  --> 7.0
['1', '2', '/', '4', '*', '1', '4', '/', '*']  --> 0.5
'''