#######################################
# 정보통계학과 
# 학번 : 2019015020 
# 이름 : 오진석
# 작성일 : 11.23
#######################################

## 위상 정렬
# 위상 정렬이란 방향 그래프에 대해 정점들의 선행 순서를 위해하지 않으면서 모든 정점을 나열하는 것

## 알고리즘

## 스택일 경우(FIFO)
# [0] : 0,[1] : 0, [2] : 1, [3] : 3, [4] : 1, [5] : 3

# 값이 0인 a, b 출력
# v = 0일때
# (0), (1), 2, 3, (4), (5)
# [2] = 0 -> 인덱스 2 vlist 추가 -> vertex[2] = c 출력
# [3] = 2
# v = 1일때
# (0), (1), (2), 3, 4, (5)
# [3] = 1
# [4] = 0  -> 인덱스 4 vlist 추가 -> vertex[4] = e 출력
# v = 2일때
# (0), (1), (2), 3, (4), 5
# [3] = 0 -> 인덱스 3 vlist 추가 -> vertex[3] = d 출력
# [5] = 2
# v = 3일때
# (0), (1), (2), (3), (4), 5
# [5] = 1
# v = 4일때
# (0), (1), (2), (3), (4), 5
# [5] = 0 -> 인덱스 5 vlist 추가 -> vertex[5] = F 출력
# v = 5일때
# (0), (1), (2), (3), (4), (5)

## 큐일 경우(FILO)
# [0] : 0,[1] : 0, [2] : 1, [3] : 3, [4] : 1, [5] : 3

# vlist = 0, 1 이므로 1반환 -> B출력
# v = 1일때
# (0), (1), (2), 3, 4, (5)
# [3] = 2
# [4] = 0  -> 인덱스 4 vlist 추가
# vlist = 0, 4 이므로 4반환 -> E출력
# v = 4일때
# (0), (1), (2), (3), (4), 5
# [5] = 2
# vlist = 0이므로 0반환 -> A출력
# v = 0일때
# (0), (1), 2, 3, (4), (5)
# [2] = 0 -> 인덱스 2 vlist 추가
# [3] = 1
# vlist = 2 이므로 2반환 -> C출력
# v = 2일때
# (0), (1), (2), 3, (4), 5
# [3] = 0 -> 인덱스 3 vlist 추가
# [5] = 1
# vlist = 3 이므로 3반환 -> D출력
# v = 3일때
# (0), (1), (2), (3), (4), 5
# [5] = 0 -> 인덱스 5 vlist 추가
# vlist = 5 이므로 5반환 -> F출력

def topological_sort_AM(vertex, graph):
    n = len(vertex)
    inDeg = [0]*n # 정점의 수를 저장 정점과 이어진 관계의 수
    
    for i in range(n):
        for j in range(n):
            if graph[i][j] > 0:
                inDeg[j] += 1 # 정점과 이어진 관계의 수를 1 증가시킴
                
    vlist = []  # 정점과 이어진 관계의 수가 0인 정점 리스트를 만듦
    for i in range(n):
        if inDeg[i] == 0:
            vlist.append(i)
            
    while len(vlist) > 0: # 리스트가 공백이 아닐 때까지
        v = vlist.pop() # 정점과 이어진 관계의 수가 0인 정점을 뒤에서 하나 꺼냄
        print(vertex[v], end=' ') # 화면 출력
        
        for u in range(n):
            if v != u and graph[v][u] > 0:
                inDeg[u] -= 1 # 해당 정점의 정점과 이어진 관계의 수를 감소
                if inDeg[u] == 0: # 정점과 이어진 관계의 수가 0이면
                    vlist.append(u) # vlist에 추가
                    
if __name__ == "__main__":
    vertex = ['A', 'B', 'C', 'D', 'E', 'F']
    graphAM = [ [0, 0, 1, 1, 0, 0],
               [0, 0, 0, 1, 1, 0],
               [0, 0, 0, 1, 0, 1],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 1],
               [0, 0, 0, 0, 0, 0]]

    print('topological_sort: ')
    topological_sort_AM(vertex, graphAM) # 재귀 사용
    print()

# 출력
# topological_sort: 
# B E A C D F 






























